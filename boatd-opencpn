#!/usr/bin/env python

import datetime
import math
import socket
import sys
import time
import argparse

import boatdclient

def get_distance(lat1, lon1, lat2, lon2):
    '''
    Calculate the distance between lat1/lon1 and lat2/lon2 in metres
    Expects coordinates in degrees
    Returns distance in metres
    '''
    radius = 6371  #earth radius in km

    dlat = math.radians(lat2 - lat1)
    dlon = math.radians(lon2 - lon1)
    a = (math.sin(dlat / 2) * math.sin(dlat / 2) +
         math.cos(math.radians(lat1)) * math.cos(math.radians(lat2)) *
         math.sin(dlon / 2) * math.sin(dlon / 2))
    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))
    d = radius * c

    return d * 1000.0

def get_heading(lat1, lon1, lat2, lon2):
    '''
    Calculate the distance between lat1/lon1 and lat2/lon2 in degrees
    Expects coordinates in degrees
    '''    
    lat1 = math.radians(lat1)
    lon1 = math.radians(lon1)
    lat2 = math.radians(lat2)
    lon2 = math.radians(lon2)    

    heading = math.degrees(math.atan2(math.sin(lon2-lon1)*math.cos(lat2), 
                                      math.cos(lat1)*math.sin(lat2)-
                                      math.sin(lat1)*math.cos(lat2)*
                                      math.cos(lon2-lon1)))

    #make headings between 0 and 360 not -180 and +180
    if(heading<0):
        heading = heading + 360

    return heading

def calculate_checksum(line):
    '''Return the NMEA checksum for a given line'''
    x = 0
    for c in line:
        x ^= ord(c)
    s = str(hex(x))[2:]
    return ('0' if len(s) < 2 else '') + s.upper()


def nmea_line(line):
    '''
    Return a completed nmea line (starting with $ and ending with checksum).
    '''
    checksum = calculate_checksum(line)
    return '$' + line + '*' + checksum


def degrees_to_nmea(input_degrees,places=3):
    '''Return a nmea formatted bearing from decimal degrees'''
    degrees = math.trunc(input_degrees)
    minutes = (input_degrees - degrees) * 60
    if places == 2:
        return '{:02}{:07.4f}'.format(degrees, abs(minutes))
    elif places == 3:
        return '{:03}{:07.4f}'.format(degrees, abs(minutes))
    else:
        return '{}{:07.4f}'.format(degrees, abs(minutes))


def hdc(heading):
    '''Return a HDC nmea sentance from a given heading'''
    line = 'HCHDT,{0:05.1f},T'.format(heading)
    return nmea_line(line)

def gga(latitude, longitude, utc_datetime):
    '''
    return a GGA message using lat, long and utc time, as wel as dummy datat
    '''
    centisecond = str(utc_datetime.microsecond)[:2]
    t = utc_datetime.strftime('%H%M%S.') + centisecond
    lat_direction = 'N' if latitude > 0 else 'S'  # noqa
    lon_direction = 'E' if longitude > 0 else 'W'  # noqa
    line = 'GPGGA,{time},{lat},{lat_dir},{lon},{lon_dir},1,12,.5,0,M,0,M,,'.format(
        lat=degrees_to_nmea(abs(latitude),2),
        lon=degrees_to_nmea(abs(longitude),3),
        lat_dir=lat_direction,
        lon_dir=lon_direction,
        time=t)
    return nmea_line(line)


def gll(latitude, longitude, utc_datetime):
    '''
    Return a GLL nmea sentance from a lat, long and date (datetime object).
    '''
    centisecond = str(utc_datetime.microsecond)[:2]
    t = utc_datetime.strftime('%H%M%S.') + centisecond
    lat_direction = 'N' if latitude > 0 else 'S'  # noqa
    lon_direction = 'E' if longitude > 0 else 'W'  # noqa
    line = 'GPGLL,{lat},{lat_dir},{lon},{lon_dir},{time},A'.format(
        lat=degrees_to_nmea(abs(latitude),2),
        lon=degrees_to_nmea(abs(longitude),3),
        lat_dir=lat_direction,
        lon_dir=lon_direction,
        time=t)
    return nmea_line(line)

def vtg(old_latitude, old_longitude, latitude, longitude, old_utc_datetime, utc_datetime):
    '''
    return a VTG message with speed and track made good
    '''
    tmg = get_heading(old_latitude,old_longitude,latitude,longitude)
    #distance in metres
    distance = get_distance(old_latitude,old_longitude,latitude,longitude)

    #time in seconds
    time_diff = float(utc_datetime) - float(old_utc_datetime)

    #speed in metres/sec
    speed_ms = distance / time_diff
    #print("speed in m/s",speed_ms)
    speed_kts = speed_ms * 1.94384
    speed_kph = speed_ms * 3.6

    lat_direction = 'N' if latitude > 0 else 'S'  # noqa
    lon_direction = 'E' if longitude > 0 else 'W'  # noqa
    line = 'GPVTG,{:05.1f},T,{:05.1f},M,{:05.1f},N,{:05.1f},K'.format(
        tmg, tmg, speed_kts, speed_kph)
    print(line)

    return nmea_line(line)



def mwv(wind_angle, wind_speed, wind_speed_units='M', reference='T'):
    '''
    Return an MWV nmea sentance (wind information).

    wind_speed_units can be one of K/M/N,
    reference can be 'R' = Relative, 'T' = True.
    '''
    #ensure we're always under 360
    if wind_angle >= 360.0:
        wind_angle = wind_angle - 360.0

    line = 'IIMWV,{0:05.1f},{1},{2:06.2f},{speed_units},A'.format(
        wind_angle,
        reference,
        wind_speed,
        speed_units=wind_speed_units,
    )
    return nmea_line(line)

def wpl(latitude,longitude,name):
    lat_direction = 'N' if latitude > 0 else 'S'  # noqa
    lon_direction = 'E' if longitude > 0 else 'W'  # noqa
    line = 'GPWPL,{lat},{lat_dir},{lon},{lon_dir},{name}'.format(
        lat=degrees_to_nmea(abs(latitude),2),
        lon=degrees_to_nmea(abs(longitude),3),
        lat_dir=lat_direction,
        lon_dir=lon_direction,
        name=name)

    return nmea_line(line)

def rsa(rudder_angle):
    line = 'RSA,{0:05.1f},A,0.0,X'.format(rudder_angle)
    return nmea_line(line)


def send_nmea_message(sock, message, dest):
    print(message)
    message = message + u"\r\n"
    sock.sendto(message.encode("utf-8"), dest)


def main(bind_ip, bind_port, boatd_host, boatd_port, delay):
    sock = socket.socket(socket.AF_INET,
                         socket.SOCK_DGRAM)

    boatd = boatdclient.Boatd(boatd_host, boatd_port)
    boat = boatdclient.Boat(boatd=boatd, auto_update=False)

    boat.update()
    #get initial readings for the position and time
    location = boat.position
    old_lat = location.lat
    old_lon = location.long
    old_time = time.time()  

    while True :
        try:
            boat.update()

            location = boat.position
	    waypoints = boatdclient.get_current_waypoints()

            messages = [
                gga(location.lat,
                    location.long,
                    datetime.datetime.now()),
                hdc(float(boat.heading)),
                mwv(float(boat.wind.absolute), reference='T', wind_speed=1),
                mwv(float(boat.wind.apparent), reference='R', wind_speed=1),
                vtg(old_lat,old_lon,location.lat,location.long,old_time,time.time()),
                #rsa(float(boat.target_rudder_angle)),
            ]
	    print("target_rudder_angle=",type(boat.target_rudder_angle))

	    #send waypoints
	    #to view, turn on "Treat WPL sentences as APRS position reports"
	    #under Options, Ships, AIS Targets, Display
	    c=0
	    for wp in waypoints:
		messages.append(wpl(wp[0],wp[1],c))
		c=c+1

            #save current positions for the next calculation of vmg/cmg
            old_lat = location.lat
            old_lon = location.long
            old_time = time.time()

            for m in messages:
                send_nmea_message(sock, m, (bind_ip, bind_port))

            time.sleep(delay)
        except KeyboardInterrupt:
            sock.close()
            sys.exit()
        except Exception as msg:
            print(msg)
            sock.close()
            sys.exit()

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument("endpoint", help="boatd API endpoint")
    parser.add_argument("port", help="UDP port to output NMEA data on",default=10110)

    host, port = parser.parse_args().endpoint.split(':')
    bind_port = int(parser.parse_args().port)

    main(bind_ip='127.0.0.1', bind_port=bind_port,
         boatd_host=host, boatd_port=port,
         delay=1)
