#!/usr/bin/env python

import datetime
import math
import socket
import sys
import time
import argparse

import boatdclient


def calculate_checksum(line):
    '''Return the NMEA checksum for a given line'''
    x = 0
    for c in line:
        x ^= ord(c)
    s = str(hex(x))[2:]
    return ('0' if len(s) < 2 else '') + s.upper()


def nmea_line(line):
    '''
    Return a completed nmea line (starting with $ and ending with checksum).
    '''
    checksum = calculate_checksum(line)
    return '$' + line + '*' + checksum


def degrees_to_nmea(input_degrees):
    '''Return a nmea formatted bearing from decimal degrees'''
    degrees = math.trunc(input_degrees)
    minutes = (input_degrees - degrees) * 60
    return '{}{:.4f}'.format(degrees, abs(minutes))


def hdc(heading):
    '''Return a HDC nmea sentance from a given heading'''
    line = 'HCHDT,{0:.3},T'.format(heading)
    return nmea_line(line)

def gga(latitude, longitude, utc_datetime):
    '''
    return a GGA message using lat, long and utc time, as wel as dummy datat
    '''
    centisecond = str(utc_datetime.microsecond)[:2]
    t = utc_datetime.strftime('%H%M%S.') + centisecond
    lat_direction = 'N' if latitude > 0 else 'S'  # noqa
    lon_direction = 'E' if longitude > 0 else 'W'  # noqa
    line = 'GPGGA,{time},{lat},{lat_dir},{lon},{lon_dir},1,12,.5,0,M,0,M,,'.format(
        lat=degrees_to_nmea(abs(latitude)),
        lon=degrees_to_nmea(abs(longitude)),
        lat_dir=lat_direction,
        lon_dir=lon_direction,
        time=t)
    return nmea_line(line)


def gll(latitude, longitude, utc_datetime):
    '''
    Return a GLL nmea sentance from a lat, long and date (datetime object).
    '''
    centisecond = str(utc_datetime.microsecond)[:2]
    t = utc_datetime.strftime('%H%M%S.') + centisecond
    lat_direction = 'N' if latitude > 0 else 'S'  # noqa
    lon_direction = 'E' if longitude > 0 else 'W'  # noqa
    line = 'GPGLL,{lat},{lat_dir},{lon},{lon_dir},{time},A'.format(
        lat=degrees_to_nmea(abs(latitude)),
        lon=degrees_to_nmea(abs(longitude)),
        lat_dir=lat_direction,
        lon_dir=lon_direction,
        time=t)
    return nmea_line(line)


def mwv(wind_angle, wind_speed, wind_speed_units='M', reference='T'):
    '''
    Return an MWV nmea sentance (wind information).

    wind_speed_units can be one of K/M/N,
    reference can be 'R' = Relative, 'T' = True.
    '''
    line = 'MWV,{0:.3g},{reference},{speed},{speed_units},A'.format(
        wind_angle,
        reference=reference,
        speed=wind_speed,
        speed_units=wind_speed_units,
    )
    return nmea_line(line)


def rsa(rudder_angle):
    line = 'RSA,{0:.3g},A,0.0,X'.format(rudder_angle)
    return nmea_line(line)


def send_nmea_message(sock, message, dest):
    message = message + u"\r\n"
    sock.sendto(message.encode("utf-8"), dest)


def main(bind_ip, bind_port, boatd_host, boatd_port, delay):
    sock = socket.socket(socket.AF_INET,
                         socket.SOCK_DGRAM)

    boatd = boatdclient.Boatd(boatd_host, boatd_port)
    boat = boatdclient.Boat(boatd=boatd, auto_update=False)

    while True :
        try:
            boat.update()

            location = boat.position

            messages = [
                gga(location.lat,
                    location.long,
                    datetime.datetime.now()),
                hdc(float(boat.heading)),
                mwv(float(boat.wind.absolute), reference='T', wind_speed=1),
                mwv(float(boat.wind.apparent), reference='R', wind_speed=1),
                rsa(float(boat.target_rudder_angle)),
            ]

            for m in messages:
                send_nmea_message(sock, m, (bind_ip, bind_port))

            time.sleep(delay)
        except KeyboardInterrupt:
            sock.close()
            sys.exit()
        except Exception as msg:
            print(msg)
            sock.close()
            sys.exit()

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument("endpoint", help="boatd API endpoint")
    host, port = parser.parse_args().endpoint.split(':')

    main(bind_ip='127.0.0.1', bind_port=10110,
         boatd_host=host, boatd_port=port,
         delay=0.2)
